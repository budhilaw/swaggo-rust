name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release for ${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin_extension: ""
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin_extension: ""
            name: linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            bin_extension: ""
            name: darwin-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            bin_extension: ""
            name: darwin-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin_extension: ".exe"
            name: windows-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu' }}

      - name: Archive binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf swaggo-rust-${{ matrix.name }}.tar.gz swaggo-rust${{ matrix.bin_extension }}
          echo "ASSET=swaggo-rust-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_PATH=target/${{ matrix.target }}/release/swaggo-rust-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Archive binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a swaggo-rust-${{ matrix.name }}.zip swaggo-rust${{ matrix.bin_extension }}
          echo "ASSET=swaggo-rust-${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ASSET_PATH=target/${{ matrix.target }}/release/swaggo-rust-${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream 